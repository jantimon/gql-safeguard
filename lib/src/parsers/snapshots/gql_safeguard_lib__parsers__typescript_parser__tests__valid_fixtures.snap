---
source: lib/src/parsers/typescript_parser.rs
expression: result
---
File: fixtures/valid/fragment_level_catch.ts
GraphQL strings found: 2

=== GraphQL String 1 ===
BytePos: 58
Content:

  fragment RiskyUserData on User @catch {
    sensitiveInfo @throwOnFieldError
    backupEmail @throwOnFieldError
    internalId
  }


=== GraphQL String 2 ===
BytePos: 233
Content:

  query GetUserWithRiskyData($id: ID!) @catch{
    user(id: $id) {
      id
      name
      friends @throwOnFieldError {
        ...RiskyUserData
      }
    }
  }


---

File: fixtures/valid/ignore_comments.ts
GraphQL strings found: 3

=== GraphQL String 1 ===
BytePos: 64
Content:

  query GetUserFieldCatch($id: ID!) {
    user(id: $id) {
      id
      # gql-safeguard-ignore
      name @throwOnFieldError  # Should be ignored
    }
    
    otherUser: user(id: "other") {
      # gql-safeguard-ignore
      avatar @required(action: THROW)  # Should be ignored (would normally fail)
    }
  }


=== GraphQL String 2 ===
BytePos: 430
Content:

  query GetUserFieldIgnoreWithFragment($id: ID!) {
    user(id: $id) {
      ...userFieldsWithIgnore
    }
  }


=== GraphQL String 3 ===
BytePos: 569
Content:

  fragment userFieldsWithIgnore on User {
    id
    # gql-safeguard-ignore
    @throwOnFieldError # Should be ignored
    @argumentDefinitions(
        showPrivateData: { type: "Boolean!", defaultValue: false }
        includeMetadata: { type: "Boolean!", defaultValue: true }
        profileVersion: { type: "Int", defaultValue: 1 }
      ) {
      name   
    }
  }


---

File: fixtures/valid/nested_fragments_protected.ts
GraphQL strings found: 6

=== GraphQL String 1 ===
BytePos: 58
Content:

  fragment UserBasicInfo on User {
    id
    name
    email
  }


=== GraphQL String 2 ===
BytePos: 158
Content:

  fragment avatarImage on User @throwOnFieldError {
    avatar
    avatarUrl
  }


=== GraphQL String 3 ===
BytePos: 268
Content:

  fragment UserAvatar on User @catch {
    avatar
    ...avatarImage
  }


=== GraphQL String 4 ===
BytePos: 367
Content:

  fragment UserBio on User {
    bioText
    bioImage @throwOnFieldError
  }


=== GraphQL String 5 ===
BytePos: 474
Content:

  fragment UserDetails on User {
    ...UserBasicInfo
    ...UserAvatar
    details @catch(to: NULL){
      bio @throwOnFieldError {
        ...UserBio
      }
    }
  }


=== GraphQL String 6 ===
BytePos: 675
Content:

  query GetFullUser($id: ID!) {
    user(id: $id) {
      ...UserDetails
    }
  }


---

File: fixtures/valid/query_with_catch.tsx
GraphQL strings found: 1

=== GraphQL String 1 ===
BytePos: 59
Content:

  query GetUserProfile($id: ID!) @catch {
    user(id: $id) {
      id
      name
      avatar @throwOnFieldError
      email
    }
  }


---

File: fixtures/valid/required_throw.ts
GraphQL strings found: 4

=== GraphQL String 1 ===
BytePos: 123
Content:

  query GetUserBasic($id: ID!) @catch {
    user(id: $id) {
      id
      name @required(action: THROW)
      email @required(action: THROW)
    }
  }


=== GraphQL String 2 ===
BytePos: 369
Content:

  query GetUserProfileFieldCatch($id: ID!) {
    user(id: $id) @catch {
      id
      name @required(action: THROW)
      avatar @required(action: THROW)
      bio
    }
  }


=== GraphQL String 3 ===
BytePos: 656
Content:

  query GetUserMixed($id: ID!) @catch {
    user(id: $id) {
      id
      name @required(action: THROW)
      avatar @throwOnFieldError
      email @required(action: THROW)
    }
  }


=== GraphQL String 4 ===
BytePos: 938
Content:

  query GetUserNested($id: ID!) {
    user(id: $id) {
      id
      profile @catch {
        displayName @required(action: THROW)
        bio @required(action: THROW)
        avatar {
          url @throwOnFieldError
        }
      }
    }
  }
