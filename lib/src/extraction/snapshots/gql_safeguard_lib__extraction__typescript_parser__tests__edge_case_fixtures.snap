---
source: lib/src/extraction/typescript_parser.rs
expression: result
---
File: fixtures/edge_cases/additional-queries.ts
GraphQL strings found: 2

=== GraphQL String 1 ===
BytePos: 66
Content:

  query AdditionalQueryEdgeCase($id: ID!) {
    user(id: $id) {
      id
      importedField @throwOnFieldError  # Some Comment
    }
  }


=== GraphQL String 2 ===
BytePos: 242
Content:

  query GraphQLQuery($id: ID!) @catch {
    user(id: $id) {
      id
      protectedField @throwOnFieldError
    }
  }


---

File: fixtures/edge_cases/circular_fragments.ts
GraphQL strings found: 3

=== GraphQL String 1 ===
BytePos: 53
Content:

  fragment FragmentACircular on User {
    id
    name
    ...FragmentBCircular
  }


=== GraphQL String 2 ===
BytePos: 165
Content:

  fragment FragmentBCircular on User {
    email
    bio
    ...FragmentACircular  # Circular reference
  }


=== GraphQL String 3 ===
BytePos: 305
Content:

  query CircularQueryTest($id: ID!) {
    user(id: $id) {
      ...FragmentACircular
    }
  }


---

File: fixtures/edge_cases/commented_graphql.ts
GraphQL strings found: 1

=== GraphQL String 1 ===
BytePos: 219
Content:

  query ValidQueryCommented($id: ID!) @catch {
    user(id: $id) {
      id
      name
      # This field comment should not affect parsing
      avatar @throwOnFieldError  # Protected by query-level @catch
    }
  }


---

File: fixtures/edge_cases/dynamic_imports.tsx
GraphQL strings found: 2

=== GraphQL String 1 ===
BytePos: 105
Content:

  query BaseQueryDynamic($id: ID!) @catch {
    user(id: $id) {
      id
      name
      dynamicField @throwOnFieldError
    }
  }


=== GraphQL String 2 ===
BytePos: 978
Content:

    query StaticDynamicQueryEdge($id: ID!) {
      user(id: $id) {
        id
        dynamicField @throwOnFieldError  # This should be flagged as unprotected
      }
    }
