name: Release

# This workflow handles the complete release process for gql-safeguard:
# 1. Creates release PRs using changesets and checks if publishing is needed
# 2. Cross-compiles Rust binaries for multiple platforms (Linux, macOS, Windows)
# 3. Publishes the main npm package and platform-specific binary packages

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      needsPublish: ${{ steps.version-check.outputs.needs-publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Check if publishing needed
        id: version-check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view gql-safeguard version 2>/dev/null || echo "0.0.0")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "needs-publish=true" >> $GITHUB_OUTPUT
            echo "Publishing needed: $CURRENT_VERSION (current) != $PUBLISHED_VERSION (published)"
          else
            echo "needs-publish=false" >> $GITHUB_OUTPUT
            echo "No publishing needed: $CURRENT_VERSION already published"
          fi

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          title: Release new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update optional dependencies versions
        run: node npm/update-optional-deps.mjs
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: release
    if: needs.release.outputs.needsPublish == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: gql-safeguard-linux-x64
            package: gql-safeguard/linux-x64
            os_name: linux
            cpu: x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: gql-safeguard-linux-arm64
            package: gql-safeguard/linux-arm64
            os_name: linux
            cpu: arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: gql-safeguard-darwin-x64
            package: gql-safeguard/darwin-x64
            os_name: darwin
            cpu: x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: gql-safeguard-darwin-arm64
            package: gql-safeguard/darwin-arm64
            os_name: darwin
            cpu: arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: gql-safeguard-win32-x64.exe
            package: gql-safeguard/win32-x64
            os_name: win32
            cpu: x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cross (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }} -p gql-safeguard
          else
            cargo build --release --target ${{ matrix.target }} -p gql-safeguard
          fi
        shell: bash

      - name: Package Binary
        run: |
          mkdir -p npm-package/bin
          if [[ "${{ matrix.os_name }}" == "win32" ]]; then
            cp target/${{ matrix.target }}/release/gql-safeguard.exe npm-package/bin/
            EXE_SUFFIX=".exe"
          else
            cp target/${{ matrix.target }}/release/gql-safeguard npm-package/bin/
            chmod +x npm-package/bin/gql-safeguard
            EXE_SUFFIX=""
          fi
          
          # Copy README, LICENSE, and CHANGELOG for binary package
          cp npm/README.md npm-package/
          cp LICENSE npm-package/
          cp CHANGELOG.md npm-package/ || echo "No changelog found"
          
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Generate package.json from template
          PACKAGE_NAME="@${{ matrix.package }}"
          OS="${{ matrix.os_name }}"
          CPU="${{ matrix.cpu }}"
          if [[ "${{ matrix.os_name }}" == "win32" ]]; then
            EXE_SUFFIX=".exe"
          else
            EXE_SUFFIX=""
          fi
          
          export VERSION PACKAGE_NAME OS CPU EXE_SUFFIX
          envsubst < npm/package.json.tmpl > npm-package/package.json
          
          # Log final package.json for debugging
          echo "Final package.json content:"
          cat npm-package/package.json
        shell: bash
        env:
          PACKAGE_NAME: "@${{ matrix.package }}"
          OS: ${{ matrix.os_name }}
          CPU: ${{ matrix.cpu }}
          EXE_SUFFIX: ${{ matrix.os_name == 'win32' && '.exe' || '' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: npm-package/
          retention-days: 1

  publish-base:
    name: Publish base package
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Publish base package and create git tags
        uses: changesets/action@v1
        with:
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-binaries:
    name: Publish platform binaries
    runs-on: ubuntu-latest
    needs: publish-base
    strategy:
      matrix:
        include:
          - name: gql-safeguard-linux-x64
            package: gql-safeguard/linux-x64
          - name: gql-safeguard-linux-arm64
            package: gql-safeguard/linux-arm64
          - name: gql-safeguard-darwin-x64
            package: gql-safeguard/darwin-x64
          - name: gql-safeguard-darwin-arm64
            package: gql-safeguard/darwin-arm64
          - name: gql-safeguard-win32-x64.exe
            package: gql-safeguard/win32-x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/

      - name: Publish platform package
        run: |
          cd dist
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}